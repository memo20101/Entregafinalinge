package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import modelo.Vehiculo;
import modelo.VehiculoElectrico_cost;
import modelo.conexion.Conexion;
import modelo.Carro_cost;
import modelo.Cicla_cost;
import modelo.Contexto;
import modelo.Item;
import modelo.Moto_cost;
import modelo.Multiplica;
import modelo.Suma;

import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;
/** Esta clase controla el panel 
@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
@version 19/11/2022/A
*/
public class PanelController implements Initializable{
	@FXML
	private Button botoningresar;
	@FXML
	private Button botonregistrar;
	@FXML
	private TableView<Vehiculo> tblVehiculo;
	@FXML
	private TableColumn coluPlaca;
	@FXML
	private TableColumn columfecha;
	@FXML
	private Button botosalir;
	@FXML
	private Button butonfil;
	@FXML
	private TextField textplaca; 
	@FXML
	private ChoiceBox tipo ;
	private ObservableList<Vehiculo> vehiculos;
	private  String veh ;
	private VehiculoElectrico_cost electricocosto;
	private Moto_cost motocosto;
	private Carro_cost carrocosto;
	private Cicla_cost ciclacosto;
    /** Esta clase inicializa todos los atributos que se usararan para el panel
@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
@version 19/11/2022/A
    */
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
	
		tipo.getItems().add("Moto");
		tipo.getItems().add("Carro");
		tipo.getItems().add("Cicla");
		tipo.getItems().add("Electrico");
        vehiculos = FXCollections.observableArrayList();
        /** Asigno las columnas con los atributos del modelo*/
        this.coluPlaca.setCellValueFactory(new PropertyValueFactory("Placa"));
        this.columfecha.setCellValueFactory(new PropertyValueFactory("fecha"));
        /**
         * @param Vehiculo El parámetro Vehiculo define el los atributos de la clase vehiculo.

         */
        Vehiculo s = new Vehiculo("","");
 	   /** Creo el observablelist*/
        ObservableList<Vehiculo> items = s.getServicios();
        this.tblVehiculo.setItems(items);

	}
	// Event Listener on Button[#botoningresar].onAction
	  /** Esta clase permite que al precionar el boton ingresar, inicie la base de datos y ingrese todo a la misma 
	   * tambien compara el tipo de vehiculo que ingresa y arroja el debido costo de parqueadero
	@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
	@version 19/11/2022/A
	@param event obtiene el evento 
	@throws CloneNotSupportedException es una excepciom a el clonenot
	@throws SQLException es una excepcion al sql 
	    */
	@FXML
	public void ingresar(ActionEvent event) throws CloneNotSupportedException, SQLException {
		// TODO Autogenerated
		 try {
			 /** Se generea la conexion a la base de datos 
			  */
			 Connection connection = null;
			 Conexion conexion = new Conexion();
			 connection = conexion.getConnetcion();		
/*
 * @param Typeveh obtiene el tipo de vehiculo que ingresa  */
			 String Typeveh =  (String) tipo.getValue();
			 System.out.println(Typeveh);
		/*
		 * Crea los objetos de la clases VehiculoElectrico_cost,Moto_cost,Carro_cost,Cicla_cost para despues compararlos y asi generar el costo */	 
			  electricocosto = new VehiculoElectrico_cost();
			  motocosto = new Moto_cost(electricocosto);
			  carrocosto  = new Carro_cost(electricocosto);
			  ciclacosto= new Cicla_cost(electricocosto);
			
			if (Typeveh.equals("Electrico")) {
				System.out.println(electricocosto.cost());
				 Alert alert = new Alert(Alert.AlertType.INFORMATION);
		            alert.setHeaderText(null);
		            alert.setTitle("Info");
		            alert.setContentText("La tarifa inicial es de   "+electricocosto.cost());
		            alert.showAndWait();
		            
		            veh = "Electrico";
			}

			if(Typeveh.equals("Moto")) { 	
				System.out.println(motocosto.cost());
				 Alert alert = new Alert(Alert.AlertType.INFORMATION);
		            alert.setHeaderText(null);
		            alert.setTitle("Info");
		            alert.setContentText("La tarifa inicial es de   "+motocosto.cost());
		            alert.showAndWait();
				veh = "Moto";
			}
			if (Typeveh.equals("Carro")){	
			    System.out.println(carrocosto.cost());
			    Alert alert = new Alert(Alert.AlertType.INFORMATION);
	            alert.setHeaderText(null);
	            alert.setTitle("Info");
	            alert.setContentText("La tarifa inicial es de   "+carrocosto.cost());
	            alert.showAndWait();
			    veh = "Carro";
			}
			if (Typeveh.equals("Cicla")){	
			    System.out.println(ciclacosto.cost());
			    Alert alert = new Alert(Alert.AlertType.INFORMATION);
	            alert.setHeaderText(null);
	            alert.setTitle("Info");
	            alert.setContentText("La tarifa inicial es de   "+ciclacosto.cost());
	            alert.showAndWait();
			    veh = "Cicla";
			}
	            /* Obtengo los datos del formulario*/
	            String placa = this.textplaca.getText();
	            String fecha = LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME);
	            /*Creo Objeto vehiculo*/ 
	            Vehiculo p = new Vehiculo(placa,fecha);
	            Vehiculo cloneVehi1 = (Vehiculo) p.clone();
                 System.out.println(p.getPlaca()+""+ p.getFecha());
                 Statement s = connection.createStatement();
                 /*
                  * @param aux guarda el atributo de la placa clonada del objeto Vehiculo. 
                  *  @param aux2 guarda el atributo fecha */
                 String aux = cloneVehi1.getPlaca();
                 String aux2 = cloneVehi1.getFecha();
                 s.executeUpdate("INSERT INTO vehicle (placa, type, created_at) VALUES ('"+aux+"','"+veh+"','"+aux2+"')");
                 /*
                  * Se asigna los valores obtenidos de la base de datos previamente */
                 Vehiculo g = new Vehiculo("","");
                 ObservableList<Vehiculo> items = g.getServicios();
                 this.tblVehiculo.setItems(items);
			} catch (NumberFormatException e) {
/* Es una alerta que el formato es incorrecto*/
	            Alert alert = new Alert(Alert.AlertType.ERROR);
	            alert.setHeaderText(null);
	            alert.setTitle("Error");
	            alert.setContentText("Formato incorrecto");
	            alert.showAndWait();
	        }
	}
	 /** Esta clase seleccionar el objeto de la lista 
	   * tambien compa
	@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
	@version 19/11/2022/A
	    */

    private void seleccionar(MouseEvent event) {

        /*Obtengo la persona seleccionada*/
        Vehiculo p = this.tblVehiculo.getSelectionModel().getSelectedItem();
        System.out.println(p.getPlaca());
        /* Sino es nula seteo los campos*/
        if (p != null) {
            this.textplaca.setText(p.getPlaca());

        }

    }
	// Event Listener on Button[#botosalir].onAction
    /** Esta clase permite que el objeto previamente seleccionado sea eliminada de la base de la datos y se elimine de la lista 
	@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
	@version 19/11/2022/A
	@param event obtiene el evento 
	@throws SQLException es una excepcion de sql 
	    */

	@FXML
	public void salir(ActionEvent event) throws SQLException {
		
		Connection connection = null;
		Conexion conexion = new Conexion();
		connection = conexion.getConnetcion();		
		// TODO Autogenerated
        /*Obtengo la persona seleccionada*/
        Vehiculo p = this.tblVehiculo.getSelectionModel().getSelectedItem();
        String aux = p.getPlaca();
        
        Statement st = connection.createStatement();

        /* realizo la consulta*/
		ResultSet rs = st.executeQuery("SELECT id as id, type as tipo FROM vehicle WHERE placa='"+aux+"'");
		int id=0;
		String tipo = "";
		
        /* recorro los resultados*/
        while (rs.next()) {

        	 id = rs.getInt("id");
        	 tipo = rs.getString("tipo");
        	 	
        }
          
        if (tipo.equals("Moto")) {
    	   Contexto contexto =  new  Contexto ( new  Multiplica ());
    	   double m = 1600;
    	   double tarifa = contexto.executeStrategy(m);
    	   System.out.println("la tarifa final es de"+tarifa);
        } 
        if (tipo.equals("Carro")) {
	        Contexto contexto =  new  Contexto ( new  Multiplica ());
	     	double m = 2000;
	     	double tarifa = contexto.executeStrategy(m);
	     	  System.out.println("la tarifa final es de"+tarifa);
		}
        if (tipo.equals("Electrico")) {
     	   Contexto contexto =  new  Contexto ( new  Suma ());
     	   double m = 1500;
     	   double tarifa = contexto.executeStrategy(m);
     	   System.out.println("la tarifa final es de"+tarifa);
        }	
        if (tipo.equals("Cicla")) {
        	Contexto contexto =  new  Contexto ( new  Suma ());
	     	double m = 300;
	     	double tarifa = contexto.executeStrategy(m);
	     	System.out.println(tarifa);
		}
     
        
        
        Statement s = connection.createStatement();
        
        s.executeUpdate("DELETE FROM `parqueadero`.`vehicle` WHERE (`id` = "+id+");");

        Vehiculo g = new Vehiculo("","");
        ObservableList<Vehiculo> items = g.getServicios();
        this.tblVehiculo.setItems(items);
        
        /*genera un aviso de salida de vehiculo*/
        if (aux != null) {
        	
         /* Es un aviso que el vehiculo ya se retiro*/ 
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText(null);
            alert.setTitle("Info");
            alert.setContentText("Vehiculos con la placa  "+aux+" a salido");
            alert.showAndWait();
            

        }
	}
    /** Esta clase permite realizar el filtro y mostrar al precionar el boton filtrar 
	@author Guillermo Sarmiento , Juan Andres Bautista ,Juan David Gonzalez 
	@version 19/11/2022/A
	@param event obtiene el evento 
	@throws SQLException es una excepcion de sql 
	    */
	public void filtrar(ActionEvent event) throws SQLException{
		 /**
		genera la conexion a base de datos 
		  */
		Connection connection = null;
		Conexion conexion = new Conexion();
		connection = conexion.getConnetcion();	
		Statement st = connection.createStatement();
		
		String aux = this.textplaca.getText();;

        /* realizo la consulta*/
		ResultSet rs = st.executeQuery("SELECT id as id FROM vehicle WHERE placa='"+aux+"'");
		int id=0;
		
        /* recorro los resultados*/
        while (rs.next()) {

        	 id = rs.getInt("id");
        	 	
        }
        if (id != 0) {
        	String p = this.textplaca.getText();
			Vehiculo s = new Vehiculo("","");
		 	   /** llamo el observablelist*/
		    ObservableList<Vehiculo> items = s.getFiltro(p);
		    this.tblVehiculo.setItems(items);
		}else {
			Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText(null);
            alert.setTitle("Info");
            alert.setContentText("La placa no se encuentra registrada");
            alert.showAndWait();
		}
		
	}
}
